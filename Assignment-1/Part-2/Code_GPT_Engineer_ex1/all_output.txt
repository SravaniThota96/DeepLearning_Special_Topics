Based on the requirements and assumptions, we will need the following core classes, functions, and methods:

1. `Snake` class in `snake.py`: This will represent the snake in the game. It will have methods for moving the snake, growing the snake, and checking if the snake has collided with itself.

2. `Food` class in `food.py`: This will represent the food in the game. It will have a method for placing the food at a random location within the grid.

3. `Game` class in `game.py`: This will represent the game itself. It will use instances of the `Snake` and `Food` classes and will have methods for starting the game, handling game over, and updating the game state.

4. `Controller` class in `controller.py`: This will handle user inputs. It will have methods for getting the current key press and updating the direction of the snake accordingly.

5. `View` class in `view.py`: This will handle the game's graphical representation. It will have methods for drawing the grid, the snake, and the food.

6. `main.py`: This will be the entry point of the application. It will create instances of the `Game`, `Controller`, and `View` classes and will contain the main game loop.

Now, let's write the code for each file.

`requirements.txt`
```plaintext
pygame==2.0.1
```

`snake.py`
```python
class Snake:
    def __init__(self):
        self.length = 1
        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]
        self.direction = random.choice([UP, DOWN, LEFT, RIGHT])

    def get_head_position(self):
        return self.positions[0]

    def turn(self, point):
        if self.length > 1 and (point[0]*-1, point[1]*-1) == self.direction:
            return
        else:
            self.direction = point

    def move(self):
        cur = self.get_head_position()
        x,y = self.direction
        new = (((cur[0]+(x*GRIDSIZE))%SCREEN_WIDTH), (cur[1]+(y*GRIDSIZE))%SCREEN_HEIGHT)
        if len(self.positions) > 2 and new in self.positions[2:]:
            self.reset()
        else:
            self.positions.insert(0, new)
            if len(self.positions) > self.length:
                self.positions.pop()

    def reset(self):
        self.length = 1
        self.positions = [((SCREEN_WIDTH // 2), (SCREEN_HEIGHT // 2))]
        self.direction = random.choice([UP, DOWN, LEFT, RIGHT])

    def draw(self, surface):
        for p in self.positions:
            draw_box(surface, self.color, p)
```

`food.py`
```python
class Food:
    def __init__(self):
        self.position = (0,0)
        self.color = (0,255,0)
        self.randomize_position()

    def randomize_position(self):
        self.position = (random.randint(0, GRID_WIDTH-1)*GRIDSIZE, random.randint(0, GRID_HEIGHT-1)*GRIDSIZE)

    def draw(self, surface):
        draw_box(surface, self.color, self.position)
```

`game.py`
```python
class Game:
    def __init__(self):
        self.snake = Snake()
        self.food = Food()

    def is_collision(self):
        if self.snake.get_head_position() == self.food.position:
            self.snake.length += 1
            self.food.randomize_position()

    def is_game_over(self):
        if self.snake.get_head_position() in self.snake.positions[1:]:
            return True
        return False

    def update(self):
        self.snake.move()
        self.is_collision()
```

`controller.py`
```python
class Controller:
    def __init__(self, game):
        self.game = game
        self.keys = {
            K_UP: (0,-1),
            K_DOWN: (0,1),
            K_LEFT: (-1,0),
            K_RIGHT: (1,0)
        }

    def get_key_press(self):
        for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == KEYDOWN:
                if event.key in self.keys:
                    self.game.snake.turn(self.keys[event.key])
```

`view.py`
```python
class View:
    def __init__(self, game):
        self.game = game
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT), 0, 32)
        self.surface = pygame.Surface(self.screen.get_size())
        self.surface = self.surface.convert()

    def draw(self):
        self.surface.fill((0,0,0))
        self.game.snake.draw(self.surface)
        self.game.food.draw(self.surface)
        self.screen.blit(self.surface, (0,0))
```

`main.py`
```python
def main():
    pygame.init()
    clock = pygame.time.Clock()
    game = Game()
    controller = Controller(game)
    view = View(game)

    while True:
        controller.get_key_press()
        game.update()
        view.draw()
        if game.is_game_over():
            pygame.quit()
            sys.exit()
        pygame.display.update()
        clock.tick(60)

if __name__ == "__main__":
    main()
```